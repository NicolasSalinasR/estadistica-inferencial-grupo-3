x_ann <- c(media_verdadera, media_nula)
y_ann <- c(dnorm(media_verdadera, mean = media_verdadera, sd = error),
dnorm(media_nula, mean = media_nula, sd = error))
y_ann <- y_ann + 0.01
g3 <- g3 + annotate("segment", x = x_ann[1], y = y_ann[1],
xend = x_ann[2], yend = y_ann[2],
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "both", type = "open"))
g3 <- g3 + annotate("text", x = sum(x_ann)/2, y = y_ann[1] - 0.001,
label = "delta", vjust = "top", parse = TRUE)
g4 <- g+ dist_0 + dist_v
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area_pattern",
xlim = c(z_inferior, z_superior),
fill = "white", colour = "blue", alpha = 0.3,
pattern_spacing = 0.15, pattern_density = 0.4,
pattern_fill = "blue", pattern_colour = "blue",
pattern_angle = 45, pattern_alpha = 0.3)
print(g4)
#calcular probabildad de cometer un error tipo 2
poder_inf <- pnorm(z_inferior, mean = media_verdadera, sd = error, lower.tail = TRUE)
poder_sup <- pnorm(z_superior, mean = media_verdadera, sd = error, lower.tail = FALSE)
poder <- poder_inf + poder_sup
beta <- 1- poder
print("error tipo 2", beta)
library(ggplot2)
library(ggpubr)
library(ggpattern)
alfa <- 0.05
n <- 100
media_nula <- 10
sigma <- 1
error <- sigma/sqrt(n)
g_xlimites <- media_nula + c(-6,5) * error
g <- ggplot() + xlim(g_xlimites)
g<- g+ labs(x = "cantidad de detergente en los bidones", y = "densidad")
g <- g + labs(title = "distribucion de las medias de los bidones de detergete")
g <- g + theme_pubr()
dist_0 <- stat_function(fun = dnorm,
args =list(mean = media_nula, sd = error),
geom = "area",
colour = "red", fill = "red", alpha = 0.1)
g1 <- g + dist_0
g1 <- g1 + geom_vline(xintercept = media_nula, colour = "red")
z_inferior <- qnorm(alfa/2, mean = media_nula, sd = error, lower.tail = TRUE)
z_superior <- qnorm(alfa/2, mean = media_nula, sd = error, lower.tail = FALSE)
g2 <- g1 + stat_function(fun = dnorm,
args = list(mean = media_nula,
sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "red", alpha = 0.6)
g2 <- g2 + stat_function(fun = dnorm,
args = list(mean = media_nula, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "red", alpha = 0.6)
#Valores reales
media_verdadera <- 9.85
delta <- media_nula - media_verdadera
dist_v <- stat_function(fun = dnorm,
args = list(mean = media_verdadera,
sd = error),
geom = "area",
colour = "blue", fill = "blue", alpha = 0.1)
g3 <- g2 + dist_v + geom_vline(xintercept = media_verdadera, colour = "blue")
x_ann <- c(media_verdadera, media_nula)
y_ann <- c(dnorm(media_verdadera, mean = media_verdadera, sd = error),
dnorm(media_nula, mean = media_nula, sd = error))
y_ann <- y_ann + 0.01
g3 <- g3 + annotate("segment", x = x_ann[1], y = y_ann[1],
xend = x_ann[2], yend = y_ann[2],
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "both", type = "open"))
g3 <- g3 + annotate("text", x = sum(x_ann)/2, y = y_ann[1] - 0.001,
label = "delta", vjust = "top", parse = TRUE)
g4 <- g+ dist_0 + dist_v
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area_pattern",
xlim = c(z_inferior, z_superior),
fill = "white", colour = "blue", alpha = 0.3,
pattern_spacing = 0.15, pattern_density = 0.4,
pattern_fill = "blue", pattern_colour = "blue",
pattern_angle = 45, pattern_alpha = 0.3)
print(g4)
#calcular probabildad de cometer un error tipo 2
poder_inf <- pnorm(z_inferior, mean = media_verdadera, sd = error, lower.tail = TRUE)
poder_sup <- pnorm(z_superior, mean = media_verdadera, sd = error, lower.tail = FALSE)
poder <- poder_inf + poder_sup
beta <- 1- poder
cat("error tipo 2", beta)
# Definir parámetros
sigma <- 1     # Desviación estándar de los volúmenes de los bidones
n <- 100       # Tamaño de la muestra total (50 de cada máquina)
mu <- 10       # Media poblacional bajo la hipótesis nula (H0)
x_critico <- 9.8   # Criterio para rechazar H0 (media muestral crítica)
# Calcular el Error Estándar de la Media (SEM)
SEM <- sigma / sqrt(n)  # Esto refleja la dispersión de las medias muestrales
# Calcular el Z-score para el valor crítico de 9.8 litros
Z <- (x_critico - mu) / SEM
# Calcular la probabilidad de error de tipo I (área a la izquierda del Z)
alpha <- pnorm(Z)  # Esto da la probabilidad de observar una media ≤ 9.8 si H0 es cierta
print(paste("la probabilidad de cometer un error tipo 1 es de: ", round(alpha*100, 2), "%"))
# Generar el gráfico
curve(dnorm(x, mean = mu, sd = SEM), from = mu - 4*SEM, to = mu + 4*SEM, col = "blue", ylab = "Densidad", xlab = "Volumen medio de los bidones", main = "Distribución Muestral de las Medias", ylim = c(0, dnorm(mu, mean = mu, sd = SEM) * 1.2))
abline(v = x_critico, col = "red", lty = 2)  # Línea para la media crítica de rechazo
text(x_critico, dnorm(x_critico, mean = mu, sd = SEM), labels = paste("Zona crítica\n(alpha =", round(alpha, 4), ")"), pos = 4, cex = 0.8, offset = 0.5)
# Sombreado del área bajo la curva desde la línea roja hacia la izquierda
x_vals <- seq(mu - 4*SEM, x_critico, length.out = 100)
y_vals <- dnorm(x_vals, mean = mu, sd = SEM)
polygon(c(mu - 4*SEM, x_vals, x_critico), c(0, y_vals, 0), col = "red", border = NA)
# Línea para la capacidad máxima del bidón
abline(v = mu, col = "green", lty = 2)  # Marca la media poblacional bajo H0
text(mu, dnorm(mu, mean = mu, sd = SEM) * 1.2, labels = "Capacidad máxima = 10", pos = 3, cex = 0.8, offset = 0.5)
library(ggplot2)
library(ggpubr)
library(ggpattern)
# Definir parámetros
sigma <- 1     # Desviación estándar de los volúmenes de los bidones
n <- 100       # Tamaño de la muestra total (50 de cada máquina)
mu <- 10       # Media poblacional bajo la hipótesis nula (H0)
x_critico <- 9.8   # Criterio para rechazar H0 (media muestral crítica)
# Calcular el Error Estándar de la Media (SEM)
SEM <- sigma / sqrt(n)  # Esto refleja la dispersión de las medias muestrales
# Calcular el Z-score para el valor crítico de 9.8 litros
Z <- (x_critico - mu) / SEM
# Calcular la probabilidad de error de tipo I (área a la izquierda del Z)
alpha <- pnorm(Z)  # Esto da la probabilidad de observar una media ≤ 9.8 si H0 es cierta
print(paste("la probabilidad de cometer un error tipo 1 es de: ", round(alpha*100, 2), "%"))
# Generar el gráfico
curve(dnorm(x, mean = mu, sd = SEM), from = mu - 4*SEM, to = mu + 4*SEM, col = "blue", ylab = "Densidad", xlab = "Volumen medio de los bidones", main = "Distribución Muestral de las Medias", ylim = c(0, dnorm(mu, mean = mu, sd = SEM) * 1.2))
abline(v = x_critico, col = "red", lty = 2)  # Línea para la media crítica de rechazo
text(x_critico, dnorm(x_critico, mean = mu, sd = SEM), labels = paste("Zona crítica\n(alpha =", round(alpha, 4), ")"), pos = 4, cex = 0.8, offset = 0.5)
# Sombreado del área bajo la curva desde la línea roja hacia la izquierda
x_vals <- seq(mu - 4*SEM, x_critico, length.out = 100)
y_vals <- dnorm(x_vals, mean = mu, sd = SEM)
polygon(c(mu - 4*SEM, x_vals, x_critico), c(0, y_vals, 0), col = "red", border = NA)
# Línea para la capacidad máxima del bidón
abline(v = mu, col = "green", lty = 2)  # Marca la media poblacional bajo H0
text(mu, dnorm(mu, mean = mu, sd = SEM) * 1.2, labels = "Capacidad máxima = 10", pos = 3, cex = 0.8, offset = 0.5)
# Cargar librería necesaria
library(ggplot2)
# Definir parámetros
sigma <- 1     # Desviación estándar
n <- 100       # Tamaño de la muestra
mu_h0 <- 10    # Media bajo H0
x_critico <- 9.8  # Media muestral crítica para rechazar H0
SEM <- sigma / sqrt(n)  # Error Estándar de la Media
# Generar secuencia de verdaderos volúmenes medios de 9.5 a 10
mu_real <- seq(9.5, 10, by = 0.01)
# Función para calcular el poder estadístico
calcular_poder <- function(mu) {
Z <- (x_critico - mu) / SEM
beta <- pnorm(Z)
poder <- 1 - beta
return(poder)
}
# Aplicar la función a cada valor de mu_real
poder_estadistico <- sapply(mu_real, calcular_poder)
# Crear un data frame para el gráfico
datos <- data.frame(mu_real, poder_estadistico)
# Generar gráfico
ggplot(datos, aes(x = mu_real, y = poder_estadistico)) +
geom_line(color = "red") +
labs(title = "Poder Estadístico vs. Verdadero Volumen Medio",
x = "Verdadero Volumen Medio de los Bidones (litros)",
y = "Poder Estadístico") +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "blue", size = 1) +
theme_minimal()
# Instalar y cargar el paquete 'pwr' si no está instalado
if(!require(pwr)) install.packages("pwr")
library(pwr)
# Parámetros para el cálculo
sigma <- 1    # Desviación estándar
delta <- 0.5  # Diferencia mínima significativa que queremos detectar
alpha <- 0.05 # Nivel de significancia
power <- 0.75 # Poder estadístico deseado
# Cálculo del tamaño de muestra necesario utilizando el paquete 'pwr'
result <- pwr.t.test(d = delta / sigma, sig.level = alpha, power = power, type = "two.sample", alternative = "two.sided")
# Mostrar el resultado
print(result)
library(pwr)
# Instalar y cargar el paquete 'pwr' si no está instalado
if(!require(pwr)) install.packages("pwr")
library(pwr)
# Parámetros para el cálculo
sigma <- 1    # Desviación estándar
delta <- 0.5  # Diferencia mínima significativa que queremos detectar
alpha <- 0.05 # Nivel de significancia
power <- 0.75 # Poder estadístico deseado
# Cálculo del tamaño de muestra necesario utilizando el paquete 'pwr'
result <- pwr.t.test(d = delta / sigma, sig.level = alpha, power = power, type = "two.sample", alternative = "two.sided")
# Mostrar el resultado
print(result)
library(ggplot2)
library(ggpubr)
library(ggpattern)
alfa <- 0.05
n <- 100
media_nula <- 10
sigma <- 1
error <- sigma/sqrt(n)
g_xlimites <- media_nula + c(-6,5) * error
g <- ggplot() + xlim(g_xlimites)
g<- g+ labs(x = "cantidad de detergente en los bidones", y = "densidad")
g <- g + labs(title = "distribucion de las medias de los bidones de detergete")
g <- g + theme_pubr()
dist_0 <- stat_function(fun = dnorm,
args =list(mean = media_nula, sd = error),
geom = "area",
colour = "red", fill = "red", alpha = 0.1)
g1 <- g + dist_0
g1 <- g1 + geom_vline(xintercept = media_nula, colour = "red")
z_inferior <- qnorm(alfa/2, mean = media_nula, sd = error, lower.tail = TRUE)
z_superior <- qnorm(alfa/2, mean = media_nula, sd = error, lower.tail = FALSE)
g2 <- g1 + stat_function(fun = dnorm,
args = list(mean = media_nula,
sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "red", alpha = 0.6)
g2 <- g2 + stat_function(fun = dnorm,
args = list(mean = media_nula, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "red", alpha = 0.6)
#Valores reales
media_verdadera <- 9.85
delta <- media_nula - media_verdadera
dist_v <- stat_function(fun = dnorm,
args = list(mean = media_verdadera,
sd = error),
geom = "area",
colour = "blue", fill = "blue", alpha = 0.1)
g3 <- g2 + dist_v + geom_vline(xintercept = media_verdadera, colour = "blue")
x_ann <- c(media_verdadera, media_nula)
y_ann <- c(dnorm(media_verdadera, mean = media_verdadera, sd = error),
dnorm(media_nula, mean = media_nula, sd = error))
y_ann <- y_ann + 0.01
g3 <- g3 + annotate("segment", x = x_ann[1], y = y_ann[1],
xend = x_ann[2], yend = y_ann[2],
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "both", type = "open"))
g3 <- g3 + annotate("text", x = sum(x_ann)/2, y = y_ann[1] - 0.001,
label = "delta", vjust = "top", parse = TRUE)
g4 <- g+ dist_0 + dist_v
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area_pattern",
xlim = c(z_inferior, z_superior),
fill = "white", colour = "blue", alpha = 0.3,
pattern_spacing = 0.15, pattern_density = 0.4,
pattern_fill = "blue", pattern_colour = "blue",
pattern_angle = 45, pattern_alpha = 0.3)
print(g4)
#calcular probabildad de cometer un error tipo 2
poder_inf <- pnorm(z_inferior, mean = media_verdadera, sd = error, lower.tail = TRUE)
poder_sup <- pnorm(z_superior, mean = media_verdadera, sd = error, lower.tail = FALSE)
poder <- poder_inf + poder_sup
beta <- 1- poder
cat("error tipo 2", beta)
# Parámetros
n <- 50  # Tamaño de muestra de cada máquina
sd <- 1  # Desviación estándar de la distribución de volumen
alpha <- 0.05  # Nivel de significancia
# Diferencia en las medias (tamaño del efecto)
porcentaje_moderna <- 0.96
porcentaje_antigua <- 0.90
diferencia_medias <- porcentaje_moderna - porcentaje_antigua
# Calculamos el poder estadístico
power <- pwr.t.test(n = n, d = diferencia_medias / sd, sig.level = alpha, type = "two.sample")$power
library(pwr)
# Parámetros para el cálculo
sigma <- 1    # Desviación estándar
delta <- 0.5  # Diferencia mínima significativa que queremos detectar
alpha <- 0.05 # Nivel de significancia
power <- 0.75 # Poder estadístico deseado
# Cálculo del tamaño de muestra necesario utilizando el paquete 'pwr'
result <- pwr.t.test(d = delta / sigma, sig.level = alpha, power = power, type = "two.sample", alternative = "two.sided")
# Mostrar el resultado
print(result)
# Parámetros
n <- 50  # Tamaño de muestra de cada máquina
sd <- 1  # Desviación estándar de la distribución de volumen
alpha <- 0.05  # Nivel de significancia
# Diferencia en las medias (tamaño del efecto)
porcentaje_moderna <- 0.96
porcentaje_antigua <- 0.90
diferencia_medias <- porcentaje_moderna - porcentaje_antigua
# Calculamos el poder estadístico
power <- pwr.t.test(n = n, d = diferencia_medias / sd, sig.level = alpha, type = "two.sample")$power
# Imprimimos el poder estadístico
power
library(pwr)
# Parámetros para el cálculo
sigma <- 1    # Desviación estándar
delta <- 0.5  # Diferencia mínima significativa que queremos detectar
alpha <- 0.05 # Nivel de significancia
power <- 0.75 # Poder estadístico deseado
# Cálculo del tamaño de muestra necesario utilizando el paquete 'pwr'
result <- pwr.t.test(d = delta / sigma, sig.level = alpha, power = power, type = "two.sample", alternative = "two.sided")
# Mostrar el resultado
print(result)
# Parámetros
n <- 50  # Tamaño de muestra de cada máquina
sd <- 1  # Desviación estándar de la distribución de volumen
alpha <- 0.05  # Nivel de significancia
# Diferencia en las medias (tamaño del efecto)
porcentaje_moderna <- 0.96
porcentaje_antigua <- 0.90
diferencia_medias <- porcentaje_moderna - porcentaje_antigua
# Calculamos el poder estadístico
power <- pwr.t.test(n = n, d = diferencia_medias / sd, sig.level = alpha, type = "two.sample")$power
poder_creo <- pwr.2p.test(h=ES.h(0.9,0.96), n = 50, sig.level = 0.05, alternative = "two.sided")
# Imprimimos el poder estadístico
power
# Parámetros
n <- 50  # Tamaño de muestra de cada máquina
sd <- 1  # Desviación estándar de la distribución de volumen
alpha <- 0.05  # Nivel de significancia
# Diferencia en las medias (tamaño del efecto)
porcentaje_moderna <- 0.96
porcentaje_antigua <- 0.90
diferencia_medias <- porcentaje_moderna - porcentaje_antigua
# Calculamos el poder estadístico
power <- pwr.t.test(n = n, d = diferencia_medias / sd, sig.level = alpha, type = "two.sample")$power
poder_creo <- pwr.2p.test(h=ES.h(0.9,0.96), n = 50, sig.level = 0.05, alternative = "two.sided")
# Imprimimos el poder estadístico
power
poder_creo
library(ggplot2)
library(ggpubr)
library(ggpattern)
# Definir parámetros
sigma <- 1     # Desviación estándar de los volúmenes de los bidones
n <- 100       # Tamaño de la muestra total (50 de cada máquina)
mu <- 10       # Media poblacional bajo la hipótesis nula (H0)
x_critico <- 9.8   # Criterio para rechazar H0 (media muestral crítica)
# Calcular el Error Estándar de la Media (SEM)
SEM <- sigma / sqrt(n)  # Esto refleja la dispersión de las medias muestrales
# Calcular el Z-score para el valor crítico de 9.8 litros
Z <- (x_critico - mu) / SEM
# Calcular la probabilidad de error de tipo I (área a la izquierda del Z)
alpha <- pnorm(Z)  # Esto da la probabilidad de observar una media ≤ 9.8 si H0 es cierta
print(paste("la probabilidad de cometer un error tipo 1 es de: ", round(alpha*100, 2), "%"))
# Generar el gráfico
curve(dnorm(x, mean = mu, sd = SEM), from = mu - 4*SEM, to = mu + 4*SEM, col = "blue", ylab = "Densidad", xlab = "Volumen medio de los bidones", main = "Distribución Muestral de las Medias", ylim = c(0, dnorm(mu, mean = mu, sd = SEM) * 1.2))
abline(v = x_critico, col = "red", lty = 2)  # Línea para la media crítica de rechazo
text(x_critico, dnorm(x_critico, mean = mu, sd = SEM), labels = paste("Zona crítica\n(alpha =", round(alpha, 4), ")"), pos = 4, cex = 0.8, offset = 0.5)
# Sombreado del área bajo la curva desde la línea roja hacia la izquierda
x_vals <- seq(mu - 4*SEM, x_critico, length.out = 100)
y_vals <- dnorm(x_vals, mean = mu, sd = SEM)
polygon(c(mu - 4*SEM, x_vals, x_critico), c(0, y_vals, 0), col = "red", border = NA)
# Línea para la capacidad máxima del bidón
abline(v = mu, col = "green", lty = 2)  # Marca la media poblacional bajo H0
text(mu, dnorm(mu, mean = mu, sd = SEM) * 1.2, labels = "Capacidad máxima = 10", pos = 3, cex = 0.8, offset = 0.5)
library(ggplot2)
library(ggpubr)
library(ggpattern)
# Se establecen variables
alfa <- 0.05
n <- 100
media_nula <- 10
sigma <- 1
# Se calcula el error estándar
error <- sigma/sqrt(n)
g_xlimites <- media_nula + c(-6,5) * error
g <- ggplot() + xlim(g_xlimites)
g<- g+ labs(x = "cantidad de detergente en los bidones", y = "densidad")
g <- g + labs(title = "distribucion de las medias de los bidones de detergete")
g <- g + theme_pubr()
dist_0 <- stat_function(fun = dnorm,
args =list(mean = media_nula, sd = error),
geom = "area",
colour = "red", fill = "red", alpha = 0.1)
g1 <- g + dist_0
g1 <- g1 + geom_vline(xintercept = media_nula, colour = "red")
z_inferior <- qnorm(alfa/2, mean = media_nula, sd = error, lower.tail = TRUE)
z_superior <- qnorm(alfa/2, mean = media_nula, sd = error, lower.tail = FALSE)
g2 <- g1 + stat_function(fun = dnorm,
args = list(mean = media_nula,
sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "red", alpha = 0.6)
g2 <- g2 + stat_function(fun = dnorm,
args = list(mean = media_nula, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "red", alpha = 0.6)
#Valores reales
media_verdadera <- 9.85
delta <- media_nula - media_verdadera
dist_v <- stat_function(fun = dnorm,
args = list(mean = media_verdadera,
sd = error),
geom = "area",
colour = "blue", fill = "blue", alpha = 0.1)
g3 <- g2 + dist_v + geom_vline(xintercept = media_verdadera, colour = "blue")
x_ann <- c(media_verdadera, media_nula)
y_ann <- c(dnorm(media_verdadera, mean = media_verdadera, sd = error),
dnorm(media_nula, mean = media_nula, sd = error))
y_ann <- y_ann + 0.01
g3 <- g3 + annotate("segment", x = x_ann[1], y = y_ann[1],
xend = x_ann[2], yend = y_ann[2],
arrow = arrow(angle = 10, length = unit(0.03, "npc"),
ends = "both", type = "open"))
g3 <- g3 + annotate("text", x = sum(x_ann)/2, y = y_ann[1] - 0.001,
label = "delta", vjust = "top", parse = TRUE)
g4 <- g+ dist_0 + dist_v
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(g_xlimites[1], z_inferior),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area",
xlim = c(z_superior, g_xlimites[2]),
fill = "blue", alpha = 0.6)
g4<- g4 + stat_function(fun = dnorm,
args = list(mean = media_verdadera, sd = error),
geom = "area_pattern",
xlim = c(z_inferior, z_superior),
fill = "white", colour = "blue", alpha = 0.3,
pattern_spacing = 0.15, pattern_density = 0.4,
pattern_fill = "blue", pattern_colour = "blue",
pattern_angle = 45, pattern_alpha = 0.3)
print(g4)
#calcular probabildad de cometer un error tipo 2
poder_inf <- pnorm(z_inferior, mean = media_verdadera, sd = error, lower.tail = TRUE)
poder_sup <- pnorm(z_superior, mean = media_verdadera, sd = error, lower.tail = FALSE)
poder <- poder_inf + poder_sup
beta <- 1- poder
cat("error tipo 2", beta)
# Cargar librería necesaria
library(ggplot2)
# Definir parámetros
sigma <- 1     # Desviación estándar
n <- 100       # Tamaño de la muestra
mu_h0 <- 10    # Media bajo H0
x_critico <- 9.8  # Media muestral crítica para rechazar H0
SEM <- sigma / sqrt(n)  # Error Estándar de la Media
# Generar secuencia de verdaderos volúmenes medios de 9.5 a 10
mu_real <- seq(9.5, 10, by = 0.01)
# Función para calcular el poder estadístico
calcular_poder <- function(mu) {
Z <- (x_critico - mu) / SEM
beta <- pnorm(Z)
poder <- 1 - beta
return(poder)
}
# Aplicar la función a cada valor de mu_real
poder_estadistico <- sapply(mu_real, calcular_poder)
# Crear un data frame para el gráfico
datos <- data.frame(mu_real, poder_estadistico)
# Generar gráfico
ggplot(datos, aes(x = mu_real, y = poder_estadistico)) +
geom_line(color = "red") +
labs(title = "Poder Estadístico vs. Verdadero Volumen Medio",
x = "Verdadero Volumen Medio de los Bidones (litros)",
y = "Poder Estadístico") +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "blue", size = 1) +
theme_minimal()
library(pwr)
# Parámetros para el cálculo
sigma <- 1    # Desviación estándar
delta <- 0.5  # Diferencia mínima significativa que queremos detectar
alpha <- 0.05 # Nivel de significancia
power <- 0.75 # Poder estadístico deseado
# Cálculo del tamaño de muestra necesario utilizando el paquete 'pwr'
result <- pwr.t.test(d = delta / sigma, sig.level = alpha, power = power, type = "two.sample", alternative = "two.sided")
# Mostrar el resultado
print(result)
# Parámetros
n <- 50  # Tamaño de muestra de cada máquina
sd <- 1  # Desviación estándar de la distribución de volumen
poder <- pwr.2p.test(h=ES.h(0.9,0.96), n = n, sig.level = alpha, alternative = "two.sided")
# Imprimimos el poder estadístico
poder
